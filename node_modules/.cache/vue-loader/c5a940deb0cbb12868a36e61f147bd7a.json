{"remainingRequest":"/home/ong-tru/Documents/MyBlog/fe/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/ong-tru/Documents/MyBlog/fe/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ong-tru/Documents/MyBlog/fe/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ong-tru/Documents/MyBlog/fe/src/components/Post.vue?vue&type=template&id=0335f4d0&scoped=true&","dependencies":[{"path":"/home/ong-tru/Documents/MyBlog/fe/src/components/Post.vue","mtime":1634290233055},{"path":"/home/ong-tru/Documents/MyBlog/fe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ong-tru/Documents/MyBlog/fe/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/ong-tru/Documents/MyBlog/fe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ong-tru/Documents/MyBlog/fe/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}